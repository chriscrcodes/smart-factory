---
- name: Provision Azure Cloud Resources
  hosts: localhost
  gather_facts: no
  vars_files:
    - variables.yaml

  tasks:
    - name: Set Azure subscription
      ansible.builtin.shell: az account set --subscription "{{ SUBSCRIPTION_ID }}"

    - name: Register Azure subscription providers
      ansible.builtin.shell: az provider register --name "{{ item }}"
      loop:
        - Microsoft.ExtendedLocation
        - Microsoft.Kubernetes
        - Microsoft.KubernetesConfiguration
        - Microsoft.IoTOperations
        - Microsoft.DeviceRegistry
        - Microsoft.SecretSyncController

    - name: Install Azure IoT Operations extension
      ansible.builtin.shell: az extension add --upgrade --name azure-iot-ops

    - name: Create resource group
      ansible.builtin.shell: az group create --location "{{ LOCATION }}" --resource-group "{{ RESOURCE_GROUP }}" --subscription "{{ SUBSCRIPTION_ID }}"

    - name: Retrieve Azure Arc Object Id to connect cluster
      ansible.builtin.shell: az ad sp show --id bc313c14-388c-4e7d-a58e-70017303ee3b --query id --output tsv
      register: arc_object_id

    - name: Creating Service Principal to manage Azure from Edge cluster
      ansible.builtin.shell: az ad sp create-for-rbac --name "{{ AIO_SERVICE_PRINCIPAL }}" --role Contributor --scopes "/subscriptions/{{ SUBSCRIPTION_ID }}/resourceGroups/{{ RESOURCE_GROUP }}"
      register: aio_sp

    - name: Create managed identity for secrets
      ansible.builtin.shell: az identity create --resource-group "{{ RESOURCE_GROUP }}" --name "{{ AIO_MANAGED_IDENTITY_SECRETS }}"
      register: managed_identity_secrets

    - name: Create managed identity for components
      ansible.builtin.shell: az identity create --resource-group "{{ RESOURCE_GROUP }}" --name "{{ AIO_MANAGED_IDENTITY_COMPONENTS }}"
      register: managed_identity_components

    - name: Create Key Vault
      ansible.builtin.shell: az keyvault create --enable-rbac-authorization false --name "{{ KEYVAULT_NAME }}" --resource-group "{{ RESOURCE_GROUP }}"
      register: keyvault

    - name: Create storage account
      ansible.builtin.shell: az storage account create --name "{{ STORAGEACCOUNT_NAME }}" --resource-group "{{ RESOURCE_GROUP }}" --enable-hierarchical-namespace
      register: storageaccount

    - name: Create Azure IoT Operations schema registry
      ansible.builtin.shell: az iot ops schema registry create --name "aio" --resource-group "{{ RESOURCE_GROUP }}" --registry-namespace "{{ AIO_SCHEMA_REGISTRY_NAMESPACE }}" --sa-resource-id "{{ storageaccount.stdout | from_json | json_query('id') }}"
      register: schemaregistry

    - name: Assign Role Based Access Control Administrator role to app registration
      ansible.builtin.shell: az role assignment create --assignee "{{ aio_sp.stdout | from_json | json_query('appId') }}" --role "Role Based Access Control Administrator" --scope "subscriptions/{{ SUBSCRIPTION_ID }}/resourceGroups/{{ RESOURCE_GROUP }}"

    - name: Assign Key Vault Secrets Officer role to managed identity
      ansible.builtin.shell: az role assignment create --assignee "{{ managed_identity_secrets.stdout | from_json | json_query('principalId') }}" --role "Key Vault Secrets Officer" --scope "{{ keyvault.stdout | from_json | json_query('id') }}"

    - name: Insert variables information in variables.yaml file
      ansible.builtin.blockinfile:
        path: ./variables.yaml
        block: |
          AIO_SP_APPID: "{{ aio_sp.stdout | from_json | json_query('appId') }}"
          AIO_SP_SECRET: "{{ aio_sp.stdout | from_json | json_query('password') }}"
          AIO_SCHEMA_REGISTRY_ID: "{{ schemaregistry.stdout | from_json | json_query('id') }}"
          AIO_MANAGED_IDENTITY_SECRETS_ID: "{{ managed_identity_secrets.stdout | from_json | json_query('id') }}"
          AIO_MANAGED_IDENTITY_COMPONENTS_ID: "{{ managed_identity_components.stdout | from_json | json_query('id') }}"
          TENANT: "{{ aio_sp.stdout | from_json | json_query('tenant') }}"
          ARC_OBJECT_ID: "{{ arc_object_id.stdout }}"
          KEYVAULT_ID: "{{ keyvault.stdout | from_json | json_query('id') }}"